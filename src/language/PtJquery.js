import React from 'react';

function PtJquery() {
  return (
    <div>
      <div className='ad-container'>  
          {/*  —Ä–µ–∫–ª–∞–º–∞  */}
        </div> 

        <h1>JavaScript(JQuery)</h1>

<p>jQuery √© uma biblioteca JavaScript que simplifica o processo de escrever c√≥digo JavaScript e trabalhar com documentos HTML. Foi criada em 2006 por John Resig e atualmente √© uma das bibliotecas JavaScript mais populares.</p>

<p>jQuery fornece uma variedade de fun√ß√µes para trabalhar com o Document Object Model (DOM), bem como para trabalhar com AJAX (JavaScript e XML Ass√≠ncronos) e criar anima√ß√µes. Tamb√©m simplifica a escrita de c√≥digo compat√≠vel com v√°rios navegadores, pois a biblioteca jQuery lida automaticamente com problemas de compatibilidade entre navegadores.</p>

<p>Aqui est√£o alguns exemplos de como o jQuery pode ser usado:</p>

<p>Manipulando elementos do DOM:</p>

<code>
  <p><span className='green'>// Alterando o texto de um elemento com ID "myElement"</span></p>

  <p><span className='blueviole'>$</span>(<span className='blue1'>'#myElement'</span>).<span className='blue'>text</span>(<span className='blue1'>'Novo Texto'</span>); </p>

  <p><span className='green'>// Adicionando um novo elemento √† p√°gina</span> </p>

  <p><span className='blueviole'>$</span>(<span className='blue1'>'body'</span>).<span className='blue'>append</span>(<span className='blue1'>'{'<'}div{'>'}Novo Elemento{'</'}div{'>'}'</span>); </p>
</code>

<p>2. Manipulando eventos:</p>

<code>
  <p><span className='green'>// Manipulando o evento de clique de um bot√£o com ID "myButton"</span></p>

  <p><span className='blueviole'>$</span>(<span className='blue1'>'#myButton'</span>).<span className='blue'>click</span>{'('}<span className='red'>function</span>() {"{"}</p>

  <p>&nbsp;<span className='blueviole'>alert</span>(<span className='blue1'>'Bot√£o clicado!'</span>);</p>

  <p>{"});"}</p>
</code>

<p>3. Trabalhando com AJAX:</p>

<code>
  <p><span className='green'>// Fazendo uma solicita√ß√£o AJAX para um servidor e atualizando um elemento da p√°gina com a resposta </span></p>

  <p> <span className='blueviole'>$</span>.<span className='blue'>get</span>{'('}<span className='blue1'>'https://exemplo.com/api/dados'</span>, <span className='red'>function</span>(resposta) {"{"}</p>

  <p><span className='blueviole'>$</span>(<span className='blue1'>'#myElement'</span>).<span className='blue'>text</span>(resposta); </p>

  <p>{" }); "}</p>
</code>

<p>No geral, jQuery √© uma ferramenta poderosa e vers√°til para simplificar o desenvolvimento JavaScript e facilitar a cria√ß√£o de p√°ginas da web din√¢micas e interativas.</p>

<b>Para incluir o jQuery em um documento HTML, voc√™ pode seguir as seguintes etapas:</b>

<p>1. Baixe a biblioteca jQuery no site oficial <a href="https://jquery.com/download/" target='_blank' > üëâüèº (https://jquery.com/download/)</a> ou use um link CDN (Content Delivery Network).</p>

<p>2. Crie um novo arquivo HTML e adicione o seguinte c√≥digo dentro da se√ß√£o "head" do seu documento HTML para incluir a biblioteca jQuery:</p>

<code>
  <p>{'<'}<span className='green'>head</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>script</span> <span className='blue'>src</span>=<span className='blue1'>"caminho/para/jquery.js"</span>{'>'}{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>head</span>{'>'}</p>
</code>

<p>Substitua "caminho/para/jquery.js" pelo caminho real onde a biblioteca jQuery est√° armazenada em seu servidor, ou use o link CDN:</p>

<code>
  <p>{'<'}<span className='green'>head</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>script</span> <span className='blue'>src</span>=<span className='blue1'>"https://code.jquery.com/jquery-3.6.0.min.js"</span>{'>'}{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>head</span>{'>'}</p>
</code>

<p>3. Depois de incluir a biblioteca jQuery em seu documento HTML, voc√™ pode come√ßar a us√°-la escrevendo c√≥digo JavaScript que fa√ßa refer√™ncia √† biblioteca jQuery.</p>

<p>Por exemplo, para alterar o texto de um elemento HTML com um ID "myElement", voc√™ pode usar o seguinte c√≥digo:</p>

<code>
  <p>{'<'}<span className='green'>body</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>div</span> <span className='blue'>id</span>=<span className='blue1'>"myElement"</span>{'>'}Ol√° Mundo!{'</'}<span className='green'>div</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>script</span>{'>'}</p>

  <p>&nbsp;&nbsp;{'$(document).ready(function() {'}</p>

  <p>&nbsp;&nbsp;&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"#myElement"</span>).<span className='blue'>text</span>(<span className='blue1'>"Novo texto!"</span>);</p>

  <p>&nbsp;&nbsp;{'});'}</p>

  <p>&nbsp;{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>body</span>{'>'}</p>
</code>

<p>Neste exemplo, estamos usando jQuery para selecionar o elemento com o ID "myElement" e alterar seu texto para "Novo texto!". O c√≥digo est√° envolvido em uma fun√ß√£o document ready, que garante que o c√≥digo seja executado apenas ap√≥s o carregamento completo do documento.</p>

<p>No geral, incluir o jQuery em um documento HTML √© um processo simples que envolve referenciar a biblioteca jQuery e escrever c√≥digo JavaScript que usa a biblioteca para manipular elementos HTML.</p>

<p>A sintaxe do jQuery √© uma combina√ß√£o de seletores no estilo CSS e c√≥digo JavaScript, o que facilita a sele√ß√£o e manipula√ß√£o de elementos HTML. Aqui est√£o alguns exemplos da sintaxe do jQuery:</p>

<p><b>1. Selecionando elementos</b></p>

<p>Para selecionar um elemento HTML, voc√™ pode usar a fun√ß√£o jQuery, que recebe um seletor no estilo CSS como argumento. Por exemplo, para selecionar todos os elementos "p" na p√°gina, voc√™ pode usar o seguinte c√≥digo:</p>

<code><p><span className='blueviole'>$</span>(<span className='blue1'>'p'</span>) </p> </code>

<p>Voc√™ tamb√©m pode encadear seletores para selecionar elementos com base em seu relacionamento com outros elementos. Por exemplo, para selecionar todos os elementos "p" que s√£o filhos de um elemento "div", voc√™ pode usar o seguinte c√≥digo:</p>

<code><p><span className='blueviole'>$</span>(<span className='blue1'>'div {'>'} p'</span>)</p></code>

<p><b>2. Modificando elementos</b></p>

<p>Depois de selecionar um elemento, voc√™ pode modificar seu conte√∫do, atributos e propriedades CSS usando jQuery. Por exemplo, para alterar o texto de todos os elementos "p" na p√°gina, voc√™ pode usar o seguinte c√≥digo:</p>

<code>
  <p><span className='blueviole'>$</span>(<span className='blue1'>'p'</span>).<span className='blue'>text</span>(<span className='blue1'>'Novo texto'</span>)</p>

  <p>Para adicionar uma <span className='green'>classe</span> a um elemento, voc√™ pode usar o m√©todo <span className='blue1'>"addClass"</span>:</p>

  <p><span className='blueviole'>$</span>(<span className='blue1'>'p'</span>).<span className='blue'>addClass</span>(<span className='blue1'>'destaque'</span>)</p>
</code>

<p><b>3. Manipulando eventos</b></p>

<p>Voc√™ pode usar o jQuery para manipular eventos como cliques, passagens do mouse e pressionamentos de tecla. Por exemplo, para manipular o evento de clique de um bot√£o com um ID "myButton", voc√™ pode usar o seguinte c√≥digo:</p>

<code>
  <p><span className='blueviole'>$</span>(<span className='blue1'>'#myButton'</span>).<span className='blue'>click</span>{'('}<span className='red'>function</span>() {"{"}</p>    
    
  <p>&nbsp;<span className='blueviole'>alert</span>(<span className='blue1'>'Bot√£o clicado!'</span>) </p> 
    
  <p>{"})"}</p>
</code>

<p><b>4. Trabalhando com AJAX</b></p>

<p>O jQuery facilita o trabalho com solicita√ß√µes AJAX. Por exemplo, para fazer uma solicita√ß√£o GET para uma URL e lidar com a resposta, voc√™ pode usar o seguinte c√≥digo:</p>

<code>
  <p>$.<span className='blue'>get</span>{'('}<span className='blue1'>'https://exemplo.com/dados'</span>, <span className='red'>function</span>(resposta) {"{"}</p>

  <p>&nbsp;{"console"}.<span className='blue'>log</span>(resposta)</p>

  <p>{"}) "}</p>
</code>

<p>No geral, a sintaxe do jQuery √© f√°cil de aprender e usar, e fornece uma maneira poderosa de manipular elementos HTML e lidar com eventos em suas aplica√ß√µes web.</p>

<p><b>Os m√©todos de travessia do jQuery s√£o usados para navegar e encontrar elementos em uma √°rvore DOM. Seguem alguns exemplos de m√©todos de travessia que lidam com elementos irm√£os.</b></p>    

<p><b>1. M√©todo next():</b> </p>

<p>O m√©todo next() retorna o pr√≥ximo elemento irm√£o do elemento selecionado. Por exemplo:</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"h2"</span>).<span className='blue'>next</span>().<span className='blue'>css</span>(<span className='blue1'>"background-color", "yellow"</span>); </p>

  <p>{'}); '}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos "h2" e aplica um estilo CSS ao pr√≥ximo elemento irm√£o alterando sua cor de fundo para amarelo.</p>

<p><b>2. M√©todo prev():</b></p>

<p>O m√©todo prev() retorna o elemento irm√£o anterior do elemento selecionado. Por exemplo:</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"h2"</span>).<span className='blue'>prev</span>().<span className='blue'>css</span>(<span className='blue1'>"background-color", "yellow"</span>); </p>

  <p>{'});'}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos "h2" e aplica um estilo CSS ao elemento irm√£o anterior alterando sua cor de fundo para amarelo.</p>
 
<b>3. M√©todo nextAll():</b>

<p>O m√©todo nextAll() retorna todos os elementos irm√£os seguintes do elemento selecionado. Por exemplo:</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"h2"</span>).<span className='blue'>nextAll</span>().<span className='blue'>css</span>(<span className='blue1'>"background-color", "yellow"</span>); </p>

  <p>{'}); '}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos "h2" e aplica um estilo CSS a todos os seus elementos irm√£os seguintes alterando sua cor de fundo para amarelo.</p>

<b>4. M√©todo prevAll():</b> 

<p>O m√©todo prevAll() retorna todos os elementos irm√£os anteriores do elemento selecionado. Por exemplo:</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"h2"</span>).<span className='blue'>prevAll</span>().<span className='blue'>css</span>(<span className='blue1'>"background-color", "yellow"</span>); </p>

  <p>{'}); '}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos "h2" e aplica um estilo CSS a todos os elementos irm√£os anteriores, alterando sua cor de fundo para amarelo</p>

<b>5. M√©todo siblings():</b>

<p>O m√©todo siblings() retorna todos os elementos irm√£os do elemento selecionado. Por exemplo:</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"h2"</span>).<span className='blue'>siblings</span>().<span className='blue'>css</span>(<span className='blue1'>"background-color", "yellow"</span>); </p>

  <p>{'}); '}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos "h2" e aplica um estilo CSS a todos os elementos irm√£os, alterando sua cor de fundo para amarelo.</p>

<p>No geral, esses m√©todos de travessia permitem navegar e selecionar facilmente elementos irm√£os de um elemento HTML, o que pode ser √∫til para diversos prop√≥sitos, como estiliza√ß√£o ou modifica√ß√£o de conte√∫do</p>

<p><b>JQuery (CSS)</b></p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p> 

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>".box"</span>).<span className='blue'>click</span>{'('}<span className='red'>function</span>() {'{'}</p>

  <p>&nbsp;&nbsp;<span className='blueviole'>$</span>(<span className='red'>this</span>).<span className='blue'>css</span>(<span className='blue1'>"background-color", "red"</span>);</p>

  <p>&nbsp;&nbsp;{'});'}</p>

  <p>{'});'}</p>
</code>

<p>Este c√≥digo seleciona o elemento com a classe "box" usando o seletor jQuery ".box". Em seguida, ele anexa um manipulador de evento de clique a esse elemento usando o m√©todo click(). Dentro da fun√ß√£o do manipulador de evento, usamos o m√©todo css() para alterar a cor de fundo do elemento para vermelho.</p>

<p>Ent√£o, quando o elemento da caixa √© clicado, sua cor de fundo muda de azul para vermelho. Tamb√©m podemos usar o m√©todo css() para alterar outras propriedades CSS como font-size, border-width, etc.</p>

<p>Aqui est√° outro exemplo que demonstra como alterar v√°rias propriedades CSS usando o m√©todo css():</p>

<code>
  <p><span className='blueviole'>$</span>(document).<span className='blue'>ready</span>{'('}<span className='red'>function</span>() {'{'}</p>

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>".box"</span>).<span className='blue'>css</span>{'({'}</p>

  <p>&nbsp;&nbsp;<span className='blue1'>"background-color"</span>: <span className='blue1'>"green"</span>,</p>

  <p>&nbsp;&nbsp;<span className='blue1'>"width"</span>: <span className='blue1'>"150px"</span>, </p>

  <p>&nbsp;&nbsp;<span className='blue1'>"height"</span>: <span className='blue1'>"150px"</span>, </p>

  <p>&nbsp;&nbsp;<span className='blue1'>"border"</span>: <span className='blue1'>"2px solid black"</span> </p>

  <p>&nbsp;{' });'}</p>

  <p>{'});'}</p>
</code>

<p>Este c√≥digo seleciona todos os elementos com a classe "box" e altera sua cor de fundo para verde, largura e altura para 150px, e adiciona uma borda s√≥lida preta de 2px.</p>

<p>No geral, usar jQuery para manipular CSS fornece uma maneira poderosa de estilizar dinamicamente elementos HTML com base em intera√ß√µes do usu√°rio ou outros eventos.</p>

<b>JQuery ($.each)</b>

<p>O m√©todo $.each() no jQuery √© usado para iterar sobre arrays e objetos. Aqui est√° um exemplo que demonstra como us√°-lo:</p>

<p>Suponha que tenhamos um array de n√∫meros e queremos iterar sobre cada elemento do array e imprimir seu valor no console:</p>
    
<code>
  <p><span className='red'>var</span> numbers = [<span className='blue1'>1, 2, 3, 4, 5</span>]; </p>

  <p>$.<span className='blue'>each</span>{'('}numbers, <span className='red'>function</span>(index, value){'{'}</p>

  <p>&nbsp;{'console'}.<span className='blue'>log</span>(<span className='blue1'>"Elemento no √≠ndice "</span> + index + <span className='blue1'>" √© "</span> + value);</p>

  <p>{'});'}</p>
</code>

<p>Neste c√≥digo, passamos o array de n√∫meros para o m√©todo $.each() junto com uma fun√ß√£o de retorno de chamada que recebe dois argumentos: o √≠ndice do elemento atual e o valor do elemento atual. Dentro da fun√ß√£o de retorno de chamada, usamos console.log() para imprimir o √≠ndice e o valor do elemento atual no console.</p>
    
<p>A sa√≠da deste c√≥digo seria:</p>

<code>
  <p>Elemento no √≠ndice <span className='blue1'>0</span> √© <span className='blue1'>1</span></p>

  <p>Elemento no √≠ndice <span className='blue1'>1</span> √© <span className='blue1'>2</span></p>

  <p>Elemento no √≠ndice <span className='blue1'>2</span> √© <span className='blue1'>3</span></p>

  <p>Elemento no √≠ndice <span className='blue1'>3</span> √© <span className='blue1'>4</span></p>

  <p>Elemento no √≠ndice <span className='blue1'>4</span> √© <span className='blue1'>5</span></p>
</code>

<p>Aqui est√° outro exemplo que demonstra como usar $.each() com um objeto:</p>

<p>Suponha que tenhamos um objeto representando os detalhes de uma pessoa e queremos iterar sobre suas propriedades e imprimir seus valores no console:</p>

<code>
  <p><span className='red'>var</span> person = {'{'}</p>

  <p>&nbsp;<span className='blue'>nome</span>: <span className='blue1'>"John"</span>,</p>

  <p>&nbsp;<span className='blue'>idade</span>: <span className='blue1'>30</span>, </p>

  <p>&nbsp;<span className='blue'>profissao</span>: <span className='blue1'>"Desenvolvedor"</span> </p>

  <p>{'};'}</p>

  <p>$.<span className='blue'>each</span>{'('}person, <span className='red'>function</span>(chave, valor){'{'}</p>

  <p>&nbsp;{'console'}.<span className='blue'>log</span>(chave + ": " + valor);</p>

  <p>{'});'}</p>
</code>

<p>Neste c√≥digo, passamos o objeto person para o m√©todo $.each() junto com uma fun√ß√£o de retorno de chamada que recebe dois argumentos: a chave da propriedade atual e o valor da propriedade atual. Dentro da fun√ß√£o de retorno de chamada, usamos console.log() para imprimir a chave e o valor da propriedade atual no console.</p>

<p>A sa√≠da deste c√≥digo seria:</p>

<code>
  <p><span className='blue'>nome</span>: John </p>

  <p><span className='blue'>idade</span>: <span className='blue1'>30</span> </p>

  <p><span className='blue'>profiss√£o</span>: Desenvolvedor</p>
</code>

<p>No geral, o m√©todo $.each() no jQuery fornece uma maneira conveniente de iterar sobre arrays e objetos e realizar opera√ß√µes em seus elementos.</p>

<b>Eventos do jQuery</b>

<p>O jQuery fornece um rico conjunto de m√©todos de manipula√ß√£o de eventos que permitem aos desenvolvedores anexar manipuladores de eventos a elementos HTML e responder a intera√ß√µes do usu√°rio, como cliques do mouse, entrada do teclado e envios de formul√°rios.</p>
    
<p>Aqui est√° um exemplo que demonstra como usar o m√©todo click() no jQuery para anexar um manipulador de eventos de clique a um elemento de bot√£o e responder ao usu√°rio clicando no bot√£o:</p>    
    
<code>
  <p>{'<'}!<span className='blue'>DOCTYPE</span> <span className='blue1'>html</span>{'>'}</p>

  <p>{'<'}<span className='green'>html</span>{'>'}</p>  

  <p>{'<'}<span className='green'>head</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>title</span>{'>'}Exemplo de Evento jQuery{'</'}<span className='green'>title</span>{'>'}</p>

  <p>{'<'}<span className='green'>script</span> <span className='blue'>src</span>=<span className='blue1'>"https://code.jquery.com/jquery-3.6.0.min.js"</span>{'>'}{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>head</span>{'>'}</p>

  <p>{'<'}<span className='green'>body</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>button</span> <span className='blue'>id</span>=<span className='blue1'>"myButton"</span>{'>'}Clique em mim!{'</'}<span className='green'>button</span>{'>'}</p>

  <p>{'<'}<span className='green'>script</span>{'>'}</p>

  <p>&nbsp;{'$(document).ready(function(){'}</p>

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"#myButton"</span>).<span className='blue'>click</span>{'('}<span className='red'>function</span>(){'{'}</p>

  <p>&nbsp;<span className='blueviole'>alert</span>(<span className='blue1'>"Bot√£o clicado!"</span>);</p>

  <p>&nbsp;{'});'}</p>

  <p>{'});'}</p>

  <p>{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>body</span>{'>'}</p>

  <p>{'</'}<span className='green'>html</span>{'>'}</p>
</code>    

<p>Neste c√≥digo, inclu√≠mos a biblioteca jQuery na se√ß√£o head do documento HTML e anexamos um manipulador de eventos <b>click()</b> ao elemento de bot√£o usando o seletor de ID <b>#myButton</b>. Dentro da fun√ß√£o de manipulador de eventos, usamos o m√©todo <b>alert()</b> para exibir uma caixa de mensagem com o texto "Bot√£o clicado!".</p>

<p>Quando o usu√°rio clica no bot√£o, o evento <b>click()</b> √© acionado e a fun√ß√£o do manipulador de eventos √© executada, exibindo a caixa de mensagem.</p>

<p>Aqui est√° outro exemplo que demonstra como usar o m√©todo <b>submit()</b> no jQuery para anexar um manipulador de eventos de envio a um elemento de formul√°rio e impedir o comportamento padr√£o de envio do formul√°rio:</p>

<code>
  <p>{'<'}!<span className='blue'>DOCTYPE</span> <span className='blue1'>html</span>{'>'}</p>

  <p>{'<'}<span className='green'>html</span>{'>'}</p> 

  <p>{'<'}<span className='green'>head</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>title</span>{'>'}Exemplo de Evento jQuery{'</'}<span className='green'>title</span>{'>'}</p>

  <p>{'<'}<span className='green'>script</span> <span className='blue'>src</span>=<span className='blue1'>"https://code.jquery.com/jquery-3.6.0.min.js"</span>{'>'}{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>head</span>{'>'}</p>

  <p>{'<'}<span className='green'>body</span>{'>'}</p>

  <p>{'<'}<span className='green'>form</span> <span className='blue'>id</span>=<span className='blue1'>"myForm"</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>label</span> <span className='blue'>for</span>=<span className='blue1'>"name"</span>{'>'}Nome:{'</'}<span className='green'>label</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>input</span> <span className='blue'>type</span>=<span className='blue1'>"text"</span> <span className='blue'>id</span>=<span className='blue1'>"name"</span> <span className='blue'>name</span>=<span className='blue1'>"name"</span>{'><'}<span className='green'>br</span>{'><'}<span className='green'>br</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>label</span> <span className='blue'>for</span>=<span className='blue1'>"email"</span>{'>'}Email:{'</'}<span className='green'>label</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>input</span> <span className='blue'>type</span>=<span className='blue1'>"email"</span> <span className='blue'>id</span>=<span className='blue1'>"email"</span> <span className='blue'>name</span>=<span className='blue1'>"email"</span>{'><'}<span className='green'>br</span>{'><'}<span className='green'>br</span>{'>'}</p>

  <p>&nbsp;{'<'}<span className='green'>input</span> <span className='blue'>type</span>=<span className='blue1'>"submit"</span> <span className='blue'>value</span>=<span className='blue1'>"Enviar"</span>{'>'}</p>

  <p>{'</'}<span className='green'>form</span>{'>'}</p>

  <p>{'<'}<span className='green'>script</span>{'>'}</p>

  <p>&nbsp;{'$(document).ready(function(){'}</p>

  <p>&nbsp;<span className='blueviole'>$</span>(<span className='blue1'>"#myForm"</span>).<span className='blue'>submit</span>{'('}<span className='red'>function</span>(event){'{'}</p>

  <p>&nbsp;event.<span className='blue'>preventDefault</span>();</p>

  <p>&nbsp;<span className='blueviole'>alert</span>(<span className='blue1'>"Formul√°rio enviado!"</span>);</p>

  <p>&nbsp;{'});'}</p>

  <p>{' });'}</p>

  <p>{'</'}<span className='green'>script</span>{'>'}</p>

  <p>{'</'}<span className='green'>body</span>{'>'}</p>

  <p>{'</'}<span className='green'>html</span>{'>'}</p>
</code>

<p>Neste c√≥digo, anexamos um manipulador de eventos <b>submit()</b> ao elemento de formul√°rio usando o seletor de ID <b>#myForm</b>. Dentro da fun√ß√£o do manipulador de eventos, usamos o m√©todo <b>preventDefault()</b> para evitar o comportamento padr√£o de envio do formul√°rio, que recarregaria a p√°gina. Em vez disso, exibimos uma caixa de mensagem com o texto "Formul√°rio enviado!". </p>
    
<p>Quando o usu√°rio envia o formul√°rio, o evento <b>submit()</b> √© acionado, e a fun√ß√£o do manipulador de eventos √© executada, evitando o comportamento padr√£o de envio do formul√°rio e exibindo a caixa de mensagem.</p>    

<p>No geral, os m√©todos de manipula√ß√£o de eventos no jQuery fornecem uma maneira poderosa de lidar com intera√ß√µes do usu√°rio e responder a eventos de forma consistente e compat√≠vel com v√°rios navegadores.</p>    

<b><p>* Texto escrito com a ajuda de um tradutor. Se encontrar algum erro, por favor, avise-nos *</p></b>
    
    <div className='ads-container'>  
      {/*  —Ä–µ–∫–ª–∞–º–∞  */}
      </div>

    </div>
  )
}

export default PtJquery;