import React from 'react';

function FrReact_3() {
  return (
    <div>
       <div className='ad-container'>  
          {/*  —Ä–µ–∫–ª–∞–º–∞  */}
        </div> 

<h1>√âv√©nements React</h1>

<p>React offre un moyen de g√©rer les √©v√©nements dans les composants, similaire √† la gestion des √©v√©nements en JavaScript classique. En React, vous pouvez ajouter des gestionnaires d'√©v√©nements √† n'importe quel √©l√©ment JSX en utilisant la syntaxe <b>on[EventName]</b>.</p>

<p>Par exemple, disons que nous avons un bouton dans un composant React pour lequel nous voulons g√©rer un √©v√©nement de clic :</p>

<code>
  <p><span className='red'>function</span> <span className='blueviole'>MonBouton</span>(props) {'{'} </p>
  <p><span className='red'>function</span> <span className='blueviole'>g√©rerClic</span>() {'{'}</p>
  <p><span className='blue'>{"console.log"}</span>(<span className='blue1'>'Bouton cliqu√©'</span>); </p>
  <p>{' }'}</p>
  <p><span className='red'>return</span> {'('}</p>
  <p>{'<'}<span className='green'>button</span> <span className='blue'>onClick</span>={'{g√©rerClic}'}{'>'}Cliquez-moi{'</'}<span className='green'>button</span>{'>'}  </p>
  <p>&nbsp;{');'}</p>
  <p>{'} '}</p>
</code>

<p>Dans cet exemple, nous d√©finissons un composant <b>MonBouton</b> qui contient un √©l√©ment de bouton avec une propri√©t√© <b>onClick</b> d√©finie sur une fonction appel√©e <b>g√©rerClic</b>. Lorsque le bouton est cliqu√©, la fonction <b>g√©rerClic</b> sera appel√©e, et le message "Bouton cliqu√©" sera enregistr√© dans la console.</p>

<p>Vous pouvez √©galement passer des arguments √† la fonction gestionnaire d'√©v√©nements en utilisant des fonctions fl√©ch√©es. Par exemple, disons que nous avons une liste d'√©l√©ments que nous voulons afficher sous forme de boutons :</p>

<code>
  <p><span className='red'>function</span> <span className='blueviole'>ListeItems</span>(props) {'{'}</p>
  <p><span className='red'>const</span> items = props.<span className='blue'>items</span>; </p>
  <p><span className='red'>function</span> <span className='blueviole'>g√©rerClic</span>(item) {'{'}</p>
  <p><span className='blue'>{'console.log'}</span>(<span className='blue1'>`Item $</span><span className='blue1'>{'{item'}.<span className='blue'>id</span>{'}'}</span><span className='blue1'> cliqu√©`</span>); </p>
  <p>&nbsp;{'}'}</p>
  <p><span className='red'>const</span> listeBoutons = {'items'}.<span className='blue'>map</span>{'('}(item) {'=>'} </p>
  <p>{'<'}<span className='green'>button</span> <span className='blue1'>key</span>= {'{item'}.<span className='blue'>{'id}'}</span> <span className='blue'>onClick</span>={'{()'} {'=>'} <span className='blueviole'>g√©rerClic</span>(item){'}'}{'>'}</p>
  <p>{'{item'}.<span className='blue'>{'name}'}</span></p>
  <p>{'</'}<span className='green'>button</span>{'>'}</p>
  <p>{' ); '}</p>
  <p><span className='red'>return</span> {'('}</p>
  <p>{'<'}<span className='green'>div</span>{'>'}</p>
  <p>{'{listeBoutons} '}</p>
  <p>{'</'}<span className='green'>div</span>{'>'}</p>
  <p>&nbsp;{');'}</p>
  <p>{'} '}</p>
</code>

<p>Dans cet exemple, nous d√©finissons un composant <b>ListeItems</b> qui prend une propri√©t√© <b>items</b>. Nous d√©finissons une fonction <b>g√©rerClic</b> qui prend un argument <b>item</b>, qui sera utilis√© pour enregistrer un message dans la console lorsque le bouton correspondant est cliqu√©.</p>

<p>Nous utilisons la m√©thode <b>map</b> pour cr√©er un nouveau tableau d'√©l√©ments <b>{'<button>'}</b>, o√π chaque √©l√©ment correspond √† un √©l√©ment dans la propri√©t√© <b>items</b>. Nous d√©finissons la propri√©t√© <b>key</b> de chaque √©l√©ment <b>{'<button> '}</b> sur l'<b>id</b> de l'√©l√©ment correspondant, ce qui est une exigence dans React pour l'aider √† optimiser les mises √† jour. Nous utilisons √©galement une fonction fl√©ch√©e pour passer l'objet <b>item</b> √† la fonction <b>g√©rerClic</b> lorsque le bouton est cliqu√©.</p>

<p>Ensuite, nous retournons un √©l√©ment <b>{'<div>'}</b> qui contient le tableau <b>listeBoutons</b>.</p>

<h5>√âv√©nements React</h5>

<p className='blue1'>onKeyDown</p>

<p className='blue1'>onKeyPress </p>

<p className='blue1'>onKeyUp</p>

<p className='blue1'>onFocus</p>

<p className='blue1'>onBlur</p>

<p className='blue1'>onChange</p>

<p className='blue1'>onInput</p>

<p className='blue1'>onInvalid </p>

<p className='blue1'>onSubmit</p>

<p className='blue1'>onClick</p>

<p className='blue1'>onContextMenu</p>

<p className='blue1'>onDoubleClick</p>

<p className='blue1'>onDrag</p>

<p className='blue1'>onDragEnd</p>

<p className='blue1'>onDragEnter</p>

<p className='blue1'>onDragExit</p>

<p className='blue1'>onDragLeave</p>

<p><a href="https://react.dev/reference/react-dom/components/common#react-event-object" target='_blank' > üëâüèº React https://react.dev/reference/react-dom/components/common#react-event-object</a> </p>

<b>√âtat React dans les composants de classe</b>

<p>En React, l'√©tat peut √©galement √™tre g√©r√© en utilisant des composants de classe. Les composants de classe sont des classes JavaScript qui √©tendent la classe <b>React.Component</b> et impl√©mentent une m√©thode <b>render</b> qui renvoie l'interface utilisateur du composant.</p>

<p>Voici un exemple de composant de classe qui g√®re l'√©tat :</p>

<code>
   <p><span className='red'>import</span> React,{"{ Component }"} <span className='red'>from</span> 'react'; </p>
   <p> <span className='red'>class</span> Compteur <span className='red'>extends</span> Component {'{'}</p>
   <p><span className='blue'>constructor</span>(props) {'{'}</p>
   <p>super (props);</p>
   <p><span className='red'>this</span>.<span className='blue'>state</span> = {'{'}<span className='blue'>count</span>: <span className='blue1'>0</span> {'}'};</p>
   <p><span className='red'>this</span>.<span className='blue'>handleClick</span> = <span className='red'>this</span>.<span className='blue'>handleClick</span>.<span className='blue'>bind</span>(<span className='red'>this</span>);</p>
   <p>&nbsp;{'}'}</p>
   <p><span className='blue'>handleClick</span>() {'{'}</p>
   <p><span className='red'>this</span>.<span className='blue'>setState</span>{'({'} <span className='blue'>count</span>: <span className='red'>this</span>.<span className='blue'>state</span>.<span className='blue'>count</span> + <span className='blue1'>1</span>{' })'}; </p>
   <p>{'}'}</p>
   <p><span className='blue'>render</span>() {'{'}</p>
   <p><span className='red'>return</span> {'('}</p>
   <p>{'<'}<span className='green'>div</span>{'>'}</p>
   <p>{'<'}<span className='green'>p</span>{'>'}Vous avez cliqu√© {'{'}<span className='red'>this</span>.<span className='blue'>state</span>.<span className='blue'>count</span>{'}'} fois{'</'}<span className='green'>p</span>{'>'}</p>
   <p>{'<'}<span className='green'>button</span> <span className='blue'>onClick</span>={'{'}<span className='red'>this</span>.<span className='blue'>handleClick</span>{'}'}{'>'}Cliquez-moi{'</'}<span className='green'>button</span>{'>'}</p>
   <p>{'</'}<span className='green'>div</span>{'>'}</p>
   <p>&nbsp;&nbsp;{');'}</p>
   <p>&nbsp;{'}'}</p>
   <p>{'}'}</p>
</code>

<p>Dans cet exemple, nous d√©finissons une classe <b>Compteur</b> qui √©tend <b>React.Component</b>. √Ä l'int√©rieur de la classe, nous d√©finissons un constructeur qui d√©finit l'√©tat initial du composant √† un objet avec une propri√©t√© <b>count</b> de 0. Nous lions √©galement la m√©thode <b>handleClick</b> √† l'instance du composant en utilisant <b>bind</b>.</p>

<p>La m√©thode <b>handleClick</b> met √† jour l'√©tat du composant en appelant this.setState avec un nouvel objet qui a une propri√©t√© <b>count</b> incr√©ment√©e de 1.</p>

<p>La m√©thode <b>render</b> retourne l'interface utilisateur du composant, qui comprend un √©l√©ment <b>{'<p>'}</b> qui affiche la valeur actuelle de <b>count</b>, et un bouton qui appelle <b>handleClick</b> lorsqu'il est cliqu√©.</p>

<p>Tout comme avec les composants fonctionnels, il est important de ne jamais modifier l'√©tat directement. Au lieu de cela, utilisez toujours <b>this.setState</b> pour mettre √† jour l'√©tat.</p>

<p>Alors que les composants de classe sont toujours pris en charge en React, les composants fonctionnels sont g√©n√©ralement pr√©f√©r√©s, surtout avec l'introduction des hooks. Cependant, comprendre les composants de classe est toujours important pour maintenir et mettre √† jour les anciens codes.</p>

<b>Cycle de vie React</b>

<p>En React, les composants ont un cycle de vie qui d√©crit les diff√©rentes √©tapes qu'ils traversent pendant leur existence. Comprendre le cycle de vie React est essentiel pour construire et maintenir des applications React robustes.</p>

<p>Voici un bref aper√ßu des m√©thodes de cycle de vie des composants React, regroup√©es par phase :</p>

<h4>Phase de montage :</h4>

<p><b>{'constructor()'}</b> : Appel√© lorsque le composant est initialis√©.</p>

<p><b>{'static getDerivedStateFromProps()'}</b> : Appel√© lorsque le composant est initialis√©, et √† nouveau lorsqu'il re√ßoit de nouvelles props. Rarement utilis√©.</p>

<p><b>{'render()'}</b> : Appel√© chaque fois que le composant doit √™tre rendu.</p>

<p><b>{'componentDidMount()'}</b> : Appel√© apr√®s que le composant a √©t√© rendu pour la premi√®re fois.</p>

<h4>Phase de mise √† jour :</h4>

<p><b>{'static getDerivedStateFromProps()'}</b> : Appel√© lorsque le composant re√ßoit de nouvelles props.</p>

<p><b>{'shouldComponentUpdate()'}</b> : Appel√© avant que le composant ne se r√©affiche. Vous permet d'annuler la mise √† jour.</p>

<p><b>{'render()'}</b> : Appel√© chaque fois que le composant doit √™tre rendu.</p>

<p><b>{'getSnapshotBeforeUpdate()'}</b> : Appel√© avant que le composant ne soit mis √† jour. Rarement utilis√©.</p>

<p><b>{'componentDidUpdate()'}</b> : Appel√© apr√®s que le composant a √©t√© mis √† jour.</p>

<h4>Phase de d√©montage :</h4>

<p><b>{'componentWillUnmount()'}</b> : Appel√© lorsque le composant est sur le point d'√™tre supprim√© du DOM.</p>

<p>Voici un exemple qui d√©montre les m√©thodes du cycle de vie :</p>

<code>
  <p><span className='red'>import</span> React,{"{ Component }"} <span className='red'>from</span> 'react'; </p>
  <p><span className='red'>class</span> DemoCycleDeVie <span className='red'>extends</span> Component {'{'}</p>
  <p><span className='blue'>constructor</span>(props) {'{'} </p>
  <p>{'super(props);'}</p>  
  <p><span className='red'>this</span>.<span className='blue'>state</span>= {'{'}<span className='blue'>count</span>: <span className='blue1'>0</span> {'}'};</p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'constructor'</span>);</p>
  <p>{'}'}</p>
  <p><span className='red'>static</span> <span className='blue'>getDerivedStateFromProps</span>(props, state) {'{'}</p>
  <p>{"console"}.<span className='blue'>log</span>('<span className='blue1'>getDerivedStateFromProps</span>');</p>
  <p><span className='red'>return null</span>;</p>
  <p>{'}'}</p>
  <p><span className='blue'>componentDidMount</span>() {'{'}</p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'componentDidMount'</span>); </p>
  <p>{'}'}</p>
  <p><span className='blue'>shouldComponentUpdate</span>(nextProps, nextState) {'{'}</p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'shouldComponentUpdate'</span>);</p>
  <p><span className='red'>return</span> <span className='blue'>true</span>;</p>
  <p>{'}'}</p>
  <p><span className='blue'>getSnapshotBeforeUpdate</span>(prevProps, prevState) {'{'}</p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'getSnapshotBeforeUpdate'</span>);</p>
  <p><span className='red'>return null</span>;</p>
  <p>{'}'}</p>
  <p><span className='blue'>componentDidUpdate</span>(prevProps, prevState, snapshot) {'{'}</p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'componentDidUpdate'</span>); </p>
  <p>{'}'}</p>
  <p><span className='blue'>componentWillUnmount</span>() {'{'} </p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'componentWillUnmount'</span>); </p>
  <p>{'}'}</p>
  <p><span className='blue'>handleClick</span> = () {'=>'} {'{'}</p>
  <p><span className='red'>this</span>.<span className='blue'>setState</span>{'({'} <span className='blue'>count</span>: <span className='red'>this</span>.<span className='blue'>state</span>.<span className='blue'>count</span> + <span className='blue1'>1</span> {'})'};</p>
  <p>{'}; '}</p>
  <p><span className='blue'>render</span>() {'{'} </p>
  <p>{"console"}.<span className='blue'>log</span>(<span className='blue1'>'render'</span>);</p>
  <p><span className='red'>return</span> {'('}</p>
  <p>{'<'}<span className='green'>div</span>{'>'}</p>
  <p>{'<'}<span className='green'>p</span>{'>'}Vous avez cliqu√© {'{'}<span className='red'>this</span>.<span className='blue'>state</span>.<span className='blue'>count</span>{'}'} fois{'</'}<span className='green'>p</span>{'>'}</p>
  <p>{'<'}<span className='green'>button</span> <span className='blue'>onClick</span>={'{'}<span className='red'>this</span>.<span className='blue'>handleClick</span>{'}>'}Cliquez-moi{'</'}<span className='green'>button</span>{'>'}</p>
  <p>{'</'}<span className='green'>div</span>{'>'}</p>
  <p>&nbsp;&nbsp;{');'}</p>
  <p>&nbsp;{'}'}</p>
  <p>{'}'}</p>
</code>

<p>Dans cet exemple, nous d√©finissons une classe <b>DemoCycleDeVie</b> qui journalise des messages dans la console pendant chaque phase du cycle de vie du composant. Nous d√©finissons √©galement une m√©thode <b>handleClick</b> qui met √† jour l'√©tat du composant.</p>

<p>Lorsque le composant est mont√© pour la premi√®re fois, les m√©thodes suivantes sont appel√©es, dans l'ordre : <b>constructor, getDerivedStateFromProps, render et componentDidMount</b>. Chaque fois que l'√©tat du composant change, les m√©thodes <b>shouldComponentUpdate, render et componentDidUpdate</b> sont appel√©es, dans cet ordre.</p>

<p>Lorsque le composant est d√©mont√©, la m√©thode <b>componentWillUnmount</b> est appel√©e.</p>

<p>Il est important de comprendre le cycle de vie des composants React afin de pouvoir optimiser vos composants et √©viter les probl√®mes courants tels que les fuites de m√©moire et les boucles infinies. Mais ne vous inqui√©tez pas si cela semble accablant au d√©but ‚Äì avec la pratique, vous deviendrez plus √† l'aise avec.</p>
   
<b><p>* Texte √©crit avec l'aide d'un traducteur. Si vous trouvez une erreur, veuillez nous en informer *</p></b>
    <div className='ads-container'>  
  {/*  —Ä–µ–∫–ª–∞–º–∞  */}
</div> 
   </div>
  )
}

export default FrReact_3;